+library(shiny)
 +library(ggplot2)
 +
 +shinyServer(function(input, output) {
 +  moneyText = function(amount) {
 +    paste('$',sprintf('%1.2f', amount), sep='')
 +  }
 +
 +  rateText = function(rate) {
 +    paste(sprintf('%1.3f', rate), '%', sep='')
 +  }
 +
 +  amortizationSchedule = function(principal, rate, payment) {
 +    remainingLoanAmount = principal
 +    periodicInterestRate = rate/100/365*30
 +    period = 0
 +    schedule = data.frame()
 +
 +    while(remainingLoanAmount > 0) {
 +      period = period + 1
 +      beginningPrincipalBalance = remainingLoanAmount
 +      interestPayment = round(periodicInterestRate * remainingLoanAmount, 2)
 +
 +      validate(
 +        need(try(interestPayment < input$payment),
 +          "Monthly Payment is not large enough to pay for all accrued interest")
 +      )
 +
 +      principalPayment = payment - interestPayment
 +
 +      if(payment > interestPayment + beginningPrincipalBalance) {
 +        principalPayment = beginningPrincipalBalance
 +      }
 +
 +      endingPrincipalBalance = beginningPrincipalBalance - principalPayment
 +      totalPayment = principalPayment + interestPayment
 +      schedule <- rbind(schedule,
 +                        data.frame(period = period,
 +                          beginningPrincipalBalance = beginningPrincipalBalance,
 +                          interestPayment = interestPayment,
 +                          principalPayment = principalPayment,
 +                          totalPayment = totalPayment,
 +                          endingPrincipalBalance = endingPrincipalBalance))
 +      remainingLoanAmount = endingPrincipalBalance
 +    }
 +
 +    schedule
 +  }
 +
 +  schedule <- reactive({
 +    amortizationSchedule(input$loanAmount, input$interestRate,
 +      input$payment)
 +  })
 +
 +  lastPayment <- reactive({
 +    amortSchedule = schedule()
 +    amortSchedule[nrow(amortSchedule),]
 +  })
 +
 +  output$loanAmount <- renderText({ moneyText(input$loanAmount) })
 +  output$interestRate <- renderText({ rateText(input$interestRate) })
 +  output$payment <- renderText({ moneyText(input$payment) })
 +
 +  output$term <- renderText({ paste(lastPayment()$period, ' Months') })
 +  output$lastPayment <- renderText({ moneyText(lastPayment()$totalPayment) })
 +  output$financeCharge <-  renderText({ moneyText(sum(schedule()$interestPayment)) })
 +  output$totalOfPayments <- renderText({ moneyText(sum(schedule()$totalPayment)) })
 +  output$schedule <- renderTable({ schedule() })
 +  output$payoffHistogram <- renderPlot({
 +    ggplot(schedule(), aes(x=period, y=endingPrincipalBalance)) +
 +    geom_bar(stat="identity") +
 +    labs(list(title = "Loan Remaining Balance over time",
 +      x = "Number of payment period", y = "Remaining Balance (Dollars)"))
 +  })
 +})
View
76  ui.R
@@ -0,0 +1,76 @@
 +library(shiny)
 +
 +# Define UI for application that plots random distributions
 +shinyUI(pageWithSidebar(
 +
 +  # Application title
 +  headerPanel("Fixed Payment Amortizer"),
 +
 +  # Sidebar with a slider input for number of observations
 +  sidebarPanel(
 +    h2('Loan Settings'),
 +    sliderInput("loanAmount",
 +                "Loan Amount",
 +                min = 3000,
 +                max = 50000,
 +                value = 10000,
 +                step= 1000),
 +
 +    sliderInput("interestRate",
 +                "Interest Rate",
 +                min = 0,
 +                max = 10,
 +                value = 3,
 +                step= 0.125),
 +
 +    sliderInput("payment",
 +                "Monthly Payment",
 +                min = 100,
 +                max = 800,
 +                value = 400,
 +                step= 25),
 +
 +    helpText("Note - Select the parameters of the loan you want:",
 +             "Loan Amount is the amount of money you would like to borrow.",
 +             "Interest Rate is the purposed interest rate that you are eligible for.",
 +             "Monthly payment is the amount of money you would pay back each month.")
 +  ),
 +
 +  # Show a plot of the generated distribution
 +  mainPanel(
 +    tabsetPanel(
 +      tabPanel("Summary",
 +        h3('Fixed Amorization Summary'),
 +        h4('Loan Parameters'),
 +        fluidRow(
 +          column(3,
 +            h5('Loan Amount'),
 +            textOutput("loanAmount")),
 +          column(3,
 +            h5('Interest Rate'),
 +            textOutput("interestRate")),
 +          column(3,
 +            h5('Monthly Payment'),
 +            textOutput("payment"))),
 +        h4('Calculated Amoritzation'),
 +        fluidRow(
 +          column(3,
 +            h5('Loan Term'),
 +            textOutput("term")),
 +          column(3,
 +            h5('Finance Change'),
 +            textOutput("financeCharge")),
 +          column(3,
 +            h5('Last Payment amount'),
 +            textOutput("lastPayment")),
 +          column(3,
 +            h5('Total of Payments'),
 +            textOutput("totalOfPayments")))
 +      ),
 +      tabPanel("Plot",
 +        plotOutput("payoffHistogram")),
 +      tabPanel("Amortization Table",
 +        tableOutput("schedule"))
 +    )
 +  )
 +))
